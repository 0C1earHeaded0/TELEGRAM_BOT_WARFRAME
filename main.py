import logging
import requests
import os
from telegram import Update, Chat, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from telegram.ext import ApplicationBuilder, ContextTypes, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from dotenv import load_dotenv

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

async def isServerAvailable():
    if requests.get("https://api.warframestat.us/pc").status_code != 200:
        return False
    else:
        return True
    
keyboardForCetusStatus = [
    [
        InlineKeyboardButton("–†–∞–≤–Ω–∏–Ω—ã –≠–π–¥–æ–ª–æ–Ω–∞ (–¶–µ—Ç—É—Å)", callback_data='1')
    ],
    [
        InlineKeyboardButton("–ö–∞–º–±–∏–æ–Ω—Å–∫–∏–π –î—Ä–µ–∏ÃÜ—Ñ (–î–µ–π–º–æ—Å)", callback_data='2')
    ],
    [
        InlineKeyboardButton("–î–æ–ª–∏–Ω–∞ –°—Ñ–µ—Ä (–§–æ—Ä—Ç—É–Ω–∞)", callback_data='3')
    ]
]

keyboard = InlineKeyboardMarkup(keyboardForCetusStatus)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not isServerAvailable():
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç ‚òπÔ∏è\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ–∑–∂–µ!")
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                    text=
                                    "<b>–ü—Ä–∏–≤–µ—Ç!üëã</b>\n"
                                    "–Ø –±–æ—Ç –ø–æ –∏–≥—Ä–µ Warframe!\n"
                                    "–ú–æ—ë –ø—Ä–∏–∑–≤–∞–Ω–∏–µ - –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∏–≥—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –∫–æ–≥–¥–∞ –∑–∞–π—Ç–∏ –≤ –∏–≥—Ä—É –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤–æ–∑–º–æ–∂–Ω—ã–º üòâ\n"
                                    "<i><u>üåç –í—ã–±–µ—Ä–∏ –ª–æ–∫–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ —Å–Ω–∏–∑—É:</u></i>",
                                    reply_markup=keyboard,
                                    parse_mode="HTML")
    
async def cetus(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not isServerAvailable():
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç :(\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ–∑–∂–µ!")
    else:
        cetusStatus = requests.get("https://api.warframestat.us/pc/cetusCycle?language=ru").json()
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text=
                                        "--------------\n"
                                        "<b><i>–¶–ï–¢–£–° (–ó–ï–ú–õ–Ø):</i></b>\n"
                                        "--------------\n"
                                        f"üåç –°–µ–π—á–∞—Å –Ω–∞ –¶–µ—Ç—É—Å–µ: <b><u>{"–î–µ–Ω—å ‚òÄÔ∏è" if cetusStatus["isDay"] else '–ù–æ—á—å üåë'}</u></b>\n"
                                        f"‚è±Ô∏è –î–æ —Å–º–µ–Ω—ã —Ü–∏–∫–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b><u>{cetusStatus['timeLeft']}</u></b>\n",
                                        parse_mode="HTML"
                                        )
async def cambionDrift(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not isServerAvailable():
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç :(\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ–∑–∂–µ!")
    else:
        cambionStatus = requests.get("https://api.warframestat.us/pc/cambionCycle?language=ru").json()
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text=
                                        "--------------\n"
                                        "<b><i>–ö–ê–ú–ë–ò–û–ù–°–ö–ò–ô –î–†–ï–ô–§ (–î–ï–ô–ú–û–°):</i></b>\n"
                                        "--------------\n"
                                        f"ü™± –°–µ–π—á–∞—Å —Ü–∞—Ä—Å—Ç–≤—É–µ—Ç: <b><u>{"–í–æ—É–º üåë" if cambionStatus["state"] == "vome" else "–§—ç–∑ ‚òÄÔ∏è"}</u></b>\n"
                                        f"‚è±Ô∏è –î–æ —Å–º–µ–Ω—ã —Ü–∏–∫–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b><u>{cambionStatus['timeLeft']}</u></b>\n",
                                        parse_mode="HTML"
                                        )
        
async def orbVallis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not isServerAvailable():
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text="–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç :(\n–í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –Ω–∞–º –ø–æ–∑–∂–µ!")
    else:
        vallisStatus = requests.get("https://api.warframestat.us/pc/vallisCycle?language=ru").json()
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                       text=
                                        "--------------\n"
                                        "<b><i>–î–û–õ–ò–ù–ê –°–§–ï–† (–§–û–†–¢–£–ù–ê):</i></b>\n"
                                        "--------------\n"
                                        f"‚ùÑÔ∏è –°–µ–π—á–∞—Å –≤ –î–æ–ª–∏–Ω–µ –°—Ñ–µ—Ä: <b><u>{"–¢–µ–ø–ª–æ ‚òÅÔ∏è" if vallisStatus["isWarm"] == True else "–•–æ–ª–æ–¥–Ω–æ üå®"}</u></b>\n"
                                        f"‚è±Ô∏è –î–æ —Å–º–µ–Ω—ã —Ü–∏–∫–ª–∞ –æ—Å—Ç–∞–ª–æ—Å—å: <b><u>{vallisStatus['timeLeft']}</u></b>\n",
                                        parse_mode="HTML"
                                        )

async def unknown(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=update.effective_chat.id, 
                                   text="–ò–∑–≤–∏–Ω–∏, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã —É –º–µ–Ω—è –ø–æ–∫–∞ –µ—â—ë –Ω–µ—Ç ‚òπÔ∏è")
    
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    
    waitingMessage_id = await context.bot.send_message(chat_id=update.effective_chat.id,
                                   text=
                                   "<i>–°–µ–∫—É–Ω–¥–æ—á–∫—É, —è –∏—â—É –¥–∞–Ω–Ω—ã–µ –æ –ª–æ–∫–∞—Ü–∏–∏... ü§î</i>\n",
                                   parse_mode="HTML")
    
    if query.data == '1': 
        await cetus(update, context)
    elif query.data == '2':
        await cambionDrift(update, context)
    elif query.data == '3':
        await orbVallis(update, context)
        
    await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=waitingMessage_id.message_id)   
    await query.answer()
        
if __name__ == '__main__':
    application = ApplicationBuilder().token(os.environ.get('TOKEN')).build()
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('cetus', cetus))
    application.add_handler(CommandHandler('cambionDrift', cambionDrift))
    application.add_handler(CommandHandler('orbVallis', orbVallis))
    application.add_handler(CallbackQueryHandler(button))
    application.add_handler(MessageHandler(filters.COMMAND, unknown))
    application.run_polling()